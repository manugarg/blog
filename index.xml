<?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Manu's Blog</title><link>http://blog.manugarg.com/</link><description>Recent content on Manu's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.manugarg.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Why you need probers</title><link>http://blog.manugarg.com/posts/why-you-need-probers/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>http://blog.manugarg.com/posts/why-you-need-probers/</guid><description>Manu's Blog http://blog.manugarg.com/posts/why-you-need-probers/ -&lt;p>What is a prober? Why do we need them? It baffled me somewhat that probers were
not well known, let alone used, in most of the places I worked at after leaving
Google in 2021. How was it possible that something that plays a vital role in
reliability at Google and possibly other big techs, is not used more widely. You
may not give any other credit to Google, but you can’t take “being reliable”
away from them and probers play a big part in ensuring that reliability.&lt;/p>
&lt;p>I believe now I&amp;rsquo;ve some understanding of why probers are not that popular:&lt;/p>
&lt;ul>
&lt;li>Probers require a non-trivial upfront investment, and benefits aren’t always
obvious to someone who hasn’t experienced their benefits firsthand. It&amp;rsquo;s hard
to invest in something that doesn&amp;rsquo;t have immediate or obvious returns.&lt;/li>
&lt;li>Additionally, the lack of awareness and demand for probers means there aren’t
many good off-the-shelf commercial solutions available. Most observability
companies offer some kind of synthetic monitoring, which is similar to probers
for the most part, but those options are often expensive and inadequate.&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-a-prober">What is a prober?&lt;/h2>
&lt;p>The basic idea behind probers is to monitor your service from the customer’s
point of view. Probers do the same thing that your customers do, through the
same interface, and verify it’s all working. This kind of monitoring is also
called blackbox monitoring because you treat the system as a blackbox.&lt;/p>
&lt;img src="http://blog.manugarg.com/images/what-is-prober.png" alt="what-is-prober" width="400" style="display: block;margin-left: auto;margin-right: auto;"/>
&lt;h2 id="but-why">But, why?&lt;/h2>
&lt;p>Probers are a very good indicator of whether things are working or not. There
are reasons for that:&lt;/p>
&lt;ol>
&lt;li>Probers see what customers see. Your monitoring agent, the prober, acts like
a customer of yours and monitors for availability and performance
regressions. If done right (more on this later), this is a very useful
monitoring setup.&lt;/li>
&lt;li>Probers provide a signal independent of the service implementation itself.
You’re not relying on the service to export a specific metric or a log line.
In other words, probers change independently of the service itself. This
decoupling is very useful, and in spirit similar to how auditors are external
to the entity being audited.&lt;/li>
&lt;li>A corollary of the above point: probers stay stable over time. You can change
your service (a blackbox from prober&amp;rsquo;s point of view) from within as much as
you like, but as long as your interfaces stay the same, the probers don’t
need to change.&lt;/li>
&lt;/ol>
&lt;p>Probers provide you a good controlled end-to-end monitoring setup, unaffected by
a lot of other factors, like user network, service working correctly, business
hours, etc. Probers don&amp;rsquo;t cover everything but they provide a rock solid signal.&lt;/p>
&lt;h2 id="what-about-other-types-of-monitoring">What about other types of monitoring?&lt;/h2>
&lt;h3 id="service-metrics">Service Metrics&lt;/h3>
&lt;p>Service metrics are what most organizations rely on today for monitoring.
Service metrics are great, and the idea is not to replace them, but I’d argue
that service metrics alone are not sufficient for the following reasons:&lt;/p>
&lt;ul>
&lt;li>Too close to the service being monitored. Often times, when a service is
having an outage, it will also stop exporting useful data,&lt;/li>
&lt;li>Dependency on the implementation. As implementation changes, metrics will need
to be updated or you’ll have partial to no real monitoring left. You won’t
believe how many times I’ve heard teams say – “we had monitoring but it was
not configured correctly”.&lt;/li>
&lt;li>Dependent on actual interactions to take place for service to detect errors.
What if your service actually broke after the maintenance during the off hours
but you won’t find it until users actually try to use the service.&lt;/li>
&lt;/ul>
&lt;h3 id="real-user-monitoring-rum">Real User Monitoring (RUM)&lt;/h3>
&lt;p>Real user monitoring or client side monitoring is based on the signals generated
by clients, browsers or apps. It takes you as close to the user as possible. but
it suffers from two big issues: 1) Noise: Client side monitoring tends to be
really noisy and depends on a lot of factors, like networking, user device,
etc, 2) It still relies on users using the service first.&lt;/p>
&lt;p>In practice, real user monitoring is good for debugging customer issues but it
doesn’t provide a reliable monitoring signal that you can page yourself on.&lt;/p>
&lt;h2 id="comparision-summary">Comparision Summary&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>Probers&lt;/th>
&lt;th>Service Metrics and Logs&lt;/th>
&lt;th>Real User Monitoring&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Reliability of signal&lt;/td>
&lt;td>High&lt;/td>
&lt;td>Moderate&lt;/td>
&lt;td>Low as signal is noisy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Initial ease and cost of implementation&lt;/td>
&lt;td>Significant initial investment&lt;/td>
&lt;td>Easy&lt;/td>
&lt;td>Moderate to significant initial investment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Closeness to the user?&lt;/td>
&lt;td>Very Close&lt;/td>
&lt;td>Not close&lt;/td>
&lt;td>Super close but noisy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Return on investment for monitoring: ongoing cost, reliability of signal, etc&lt;/td>
&lt;td>High as ongoing cost is low and reliability is high&lt;/td>
&lt;td>Moderate&lt;/td>
&lt;td>Low&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="tooling">Tooling&lt;/h2>
&lt;p>I&amp;rsquo;ll have to write aother post to discuss tooling in detail, but you can&amp;rsquo;t not
go wrong with &lt;a href="https://cloudprober.org">Cloudprober&lt;/a> &amp;#x1f609;. It started at
Google, but grew in the world of open source (see &lt;a href="http://blog.manugarg.com/posts/about-cloudprober/">about
cloudprober&lt;/a>) and is used by many
organizations now. Cloudprober offers a feature-rich and reliable probing
solution.&lt;/p>
&lt;h2 id="what-do-typical-probers-look-like">What do typical probers look like?&lt;/h2>
&lt;p>Here are some of the probers use cases I’ve seen over the years:&lt;/p>
&lt;ul>
&lt;li>Network connectivity and performance test between two endpoints. Endpoints can
be internal or external, or over VPN.&lt;/li>
&lt;li>TCP / UDP tests to ensure something is available or not available.&lt;/li>
&lt;li>REST (HTTP) probes to APIs with or without Auth.&lt;/li>
&lt;li>HTTP probes for important properties like homepage, docs, etc.&lt;/li>
&lt;li>gRPC requests to internal and external services.&lt;/li>
&lt;li>Kubernetes components checks, e.g., probe to verify kube-dns.&lt;/li>
&lt;li>Database availability checks.&lt;/li>
&lt;li>Object storage (S3/GCS) availability and performance.&lt;/li>
&lt;li>Workflow probers to verify complex user journeys, e.g., create a VM, verify
the connectivity to VM, destroy the VM.&lt;/li>
&lt;/ul>
&lt;h2 id="uptrend">Uptrend&lt;/h2>
&lt;p>Even though probers are not very common, I believe their usage is picking up.
More and more organizations are using &lt;a href="https://cloudprober.org">cloudprober&lt;/a>
now. I hope this article makes things more clear and helps that trend further.
In future blog posts I&amp;rsquo;ll try to demystify more implementation related details,
e.g., what you should probe and how to write reliable workflow probes.&lt;/p>
&lt;p>Join me on &lt;a href="https://linkedin.com/in/manugarg">LinkedIn&lt;/a> or
&lt;a href="https://join.slack.com/t/cloudprober/shared_invite/enQtNjA1OTkyOTk3ODc3LWQzZDM2ZWUyNTI0M2E4NmM4NTIyMjM5M2E0MDdjMmU1NGQ3NWNiMjU4NTViMWMyMjg0M2QwMDhkZGZjZmFlNGE">Cloudprober&amp;rsquo;s Slack&lt;/a>
for further discussion on similar topics.&lt;/p>
- http://blog.manugarg.com/posts/why-you-need-probers/ -</description></item><item><title>About Cloudprober</title><link>http://blog.manugarg.com/posts/about-cloudprober/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>http://blog.manugarg.com/posts/about-cloudprober/</guid><description>Manu's Blog http://blog.manugarg.com/posts/about-cloudprober/ -&lt;h2 id="origin">Origin&lt;/h2>
&lt;p>I started building Cloudprober in 2016, while I was at Google, leading the Cloud
Networking SRE team there. Google Cloud was just beginning to grow big, and we
were still grappling with some early growth issue. Our biggest problem was that
our customers were discovering problems before us, which resulted in bad
experience for our customers and huge time sink for my team in debugging those
issues.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Google&amp;rsquo;s existing monitoring tools didn&amp;rsquo;t work well in Cloud, necessitating the
need to build things from ground up. And since probers are the cornerstone of
monitoring and reliability at Google&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, that&amp;rsquo;s where we decided to start.
&lt;em>Thus began the journey of Cloudprober&lt;/em>.&lt;/p>
&lt;p>Even though the primary goal of Cloudprober at that time was to discover and
alert on Cloud Networking availability and performance problems, we decided to
develop it as a generic prober that could be used to monitor a wide variety of
systems and services. We also decided to make Cloudprober open source so that a
wider community could trust it, contribute to it, and run it on their own
systems.&lt;/p>
&lt;h2 id="scale-efficiency">Scale, Efficiency&lt;/h2>
&lt;p>For scales as big as Google Cloud, horizontal scalability and efficiency become
critical requirements, and for a monitoring software to be useful reliability is
super important as well. Keeping these requirements in mind, our goal for
Cloudprober was for it to be able to reliably monitor 100s of 1000s of endpoints
(IPs, Ports, HTTP/S URLs, etc) from each instance, while keeping the resource
requirements and management overhead very low&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Cloudprober maximizes resources utilization by relying heavily on Go concurrency
(&lt;em>resource efficiency&lt;/em>), supports probing large number of targets in parallel at
a high frequency (&lt;em>each instance does more&lt;/em>), minimizes the need of frequent
updates by supporting dynamic targets discovery (&lt;em>ease of management&lt;/em>), has
native implementations for common probe types (&lt;em>efficiency&lt;/em>), and so on.&lt;/p>
&lt;h2 id="beyond-google-and-open-source">Beyond Google and Open-Source&lt;/h2>
&lt;p>We
&lt;a href="https://opensource.googleblog.com/2018/03/cloudprober-open-source-black-box.html">open-sourced&lt;/a>
Cloudprober in 2017. That brought in a new phase in its evolution. We added many
features over time to make it more useful to the wider community, such as
first-class Kubernetes support, a built-in probe status UI, PostgreSQL and
Cloudwatch surfacers, OAuth support, Validators, and most recently, built-in
alerting capability.&lt;/p>
&lt;p>We used the same codebase for the internal and open-source versions, which was
more work but it created a huge advantage &amp;ndash; our own extensive internal
deployment provided a continuous testing platform for Cloudprober, particularly
for its scalability and performance aspects, while we added all these features.&lt;/p>
&lt;h2 id="move-away-from-google-github">Move away from Google Github&lt;/h2>
&lt;p>I left Google in Nov 2021. To keep working on Cloudprober independently, I moved
Cloudprober&amp;rsquo;s Github repository from
&lt;a href="https://github.com/google/cloudprober">github.com/google/cloudprober&lt;a>
to
&lt;a href="https://github.com/cloudprober/cloudprober">github.com/cloudprober/cloudprober&lt;/a>.
This was a disruptive move and we lost a lot of Github stars in the process
(1.4k - &amp;#x1f603;), but overall it was a good move as Cloudprober has grown much
faster after becoming independent.&lt;/p>
&lt;p>While I can&amp;rsquo;t say this authoritatively now as I don&amp;rsquo;t work there anymore, from
what I know, Google still uses Cloudprober, in fact, even more widely now.&lt;/p>
&lt;h2 id="growth-and-stability">Growth and stability&lt;/h2>
&lt;p>Throughout its journey, Cloudprober has continuously adapted and expanded to
meet the evolving needs of its users&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. To ensure that Cloudprober thrives and
evolves robustly, we&amp;rsquo;ve been very diligent that it grows in a structured way, a
commitment we&amp;rsquo;ll uphold in future as well.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>A customer-reported infrastructure issue is much harder to debug than an
issue discovered by your own monitoring.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Almost all of Google&amp;rsquo;s systems rely on probers to detect customer facing
problems.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Hostinger was able to probe 1.8M targets using a single instance:
&lt;a href="https://www.hostinger.com/blog/cloudprober-explained-the-way-we-use-it-at-hostinger">blog&lt;/a>.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>I think it&amp;rsquo;s an essential trait for any software. Software that don&amp;rsquo;t evolve
with time wither away.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
- http://blog.manugarg.com/posts/about-cloudprober/ -</description></item></channel></rss>